package byow.Core;

import byow.TileEngine.TERenderer;
import byow.TileEngine.TETile;
import byow.TileEngine.Tileset;
import edu.princeton.cs.algs4.StdDraw;

import java.awt.*;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

import java.io.File;
import java.nio.file.Paths;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;

/**
 * handle interactivity.
 * Include 1 primary + 2 secondary features for Ambition Score:
 *  1) turn on/off light (primary)
 *  2) real date and time in HUD area
 *  3) the ability to create a new world without closing and
 *     reopening the project, when reach a “game over” state
 * reused portion of codes from lab12
 *
 * @author group g205: Audrey Su, Andhika Tirtawisata
 */
public class Interact {
    //constants, required by style checker too
    static final int HUD_FONT_SIZE = 14;
    static final double HUD_MARGIN = 1.5;
    static final int HUD_LEFT_START = 9;
    static final int HUD_RIGHT_START = 9;

    static final int MENU_WIDTH = 45;
    static final int MENU_HEIGHT = 45;
    static final int MENU_SCALE = 16;
    static final int MENU_FONT_SIZE = 30;
    static final int MENU_Y = 28;
    static final int MENU_LINE_H = 3;
    static final int THREE = 3;
    private static final int SHORT_PAUSE = 300;
    private static final int LONG_PAUSE = 1500;

    long seed;
    int width; //world width
    int height; //world height
    TETile[][] frame;
    int[] you; //avatar/you loc
    int[] mouse; //mouseloc
    TETile youtile = Tileset.FLOOR; //keep old tile replaced by avatar
    StringBuffer actHistory = new StringBuffer();
    static File SAVE = Paths.get(System.getProperty("user.dir"), "proj3save.txt").toFile();

    TERenderer ter = new TERenderer();

    //game states
    boolean done = false;
    boolean goal = false; //achieve goal
    boolean colonflag = false; //keep track colon command


    public Interact(int w, int h) {
        this(w, h, 1);
    }
    public Interact(int w, int h, long seed) {
        this.seed = seed;
        this.width = w;
        this.height = h;
        this.frame = new TETile[width][height];
        this.mouse = new int[2];
        this.you = new int[2];

        clearForMenu();
    }

    private void clearForMenu() {
        //reuse draw initilization from lab12
        StdDraw.setCanvasSize(MENU_WIDTH * MENU_SCALE, MENU_HEIGHT * MENU_SCALE);
        Font font = new Font("Monaco", Font.BOLD, MENU_FONT_SIZE);
        StdDraw.setFont(font);
        StdDraw.setXscale(0, MENU_WIDTH);
        StdDraw.setYscale(0, MENU_HEIGHT);
        StdDraw.clear(Color.BLACK);
        StdDraw.enableDoubleBuffering();
    }

    private void fillTestWorld(TETile[][] w) {
        //test world will be replaced with real world later on
        int wh = w[0].length;
        int ww = w.length;
        for (int x = 0; x < ww; x += 1) {
            for (int y = 0; y < wh; y += 1) {
                w[x][y] = Tileset.NOTHING;
            }
        }

        for (int x = 2; x < ww - 2; x += 1) {
            for (int y = 2; y < wh - 2; y += 1) {
                w[x][y] = Tileset.WALL;
            }
        }

        for (int x = THREE; x < ww - THREE; x += 1) {
            for (int y = THREE; y < wh - THREE; y += 1) {
                w[x][y] = Tileset.FLOOR;
            }
        }

        w[ww / 2][wh / 2] = Tileset.AVATAR;
        w[ww / 2 + THREE][wh / 2 + THREE] = Tileset.STAR;
        w[ww / 2 + THREE][2] = Tileset.UNLOCKED_DOOR;
        you[0] = ww / 2;
        you[1] = wh / 2;
    }
    public TETile[][] buildWorld() {
        ter.initialize(width, height);

        //TODO: build frame from World, replace test world
        fillTestWorld(this.frame);
        ter.renderFrame(this.frame);

        return this.frame;
    }

    /**
     * reused from lab12
     * @param s
     */
    public void drawFrame(String s) {
        /* Take the input string S and display it at the center of the screen,
         * with the pen settings given below. */
        StdDraw.clear(Color.BLACK);
        StdDraw.setPenColor(Color.WHITE);

        Font fontBig = new Font("Monaco", Font.BOLD, MENU_FONT_SIZE);
        StdDraw.setFont(fontBig);
        StdDraw.text(MENU_WIDTH / 2, MENU_HEIGHT / 2, s);

        StdDraw.show();
    }

    public void showMenu(String s) {
        /* Take the input string S and display it at the center of the screen,
         * with the pen settings given below. */
        StdDraw.clear(Color.BLACK);
        StdDraw.setPenColor(Color.WHITE);

        Font fontBig = new Font("Monaco", Font.BOLD, MENU_FONT_SIZE);
        StdDraw.setFont(fontBig);
        StdDraw.text(MENU_WIDTH / 2, MENU_HEIGHT - MENU_LINE_H, s);

        StdDraw.text(MENU_WIDTH / 2, MENU_Y, "New Game (n/N)");
        StdDraw.text(MENU_WIDTH / 2, MENU_Y - MENU_LINE_H, "Load Game (l/L)");
        StdDraw.text(MENU_WIDTH / 2, MENU_Y - 2 * MENU_LINE_H, "Quit Game (q/Q)");

        StdDraw.show();
    }

    public void showMenu() {
        this.showMenu("Welcome to Proj3 (g205)");
    }

    /**
     * reuse from lab 12
     * @param
     * @return
     */
    public String getSeed() {
        //Read n letters of player input
        StringBuffer sb = new StringBuffer();

        drawFrame("Pl input seed, then letter s");
        StdDraw.pause(LONG_PAUSE);

        while (true) {
            if (StdDraw.hasNextKeyTyped()) {
                char c = Character.toUpperCase(StdDraw.nextKeyTyped());
                if (c == 'S') {
                    drawFrame("Starting new game ... ");
                    StdDraw.pause(LONG_PAUSE);
                    return sb.toString();
                } else if (Character.isDigit(c)) {
                    sb.append(c);
                    drawFrame(sb.toString());
                    StdDraw.pause(SHORT_PAUSE);
                }
            }
        }
    }

    public void handleMenu() {
        char c = ' ';
        while (true) {
            if (StdDraw.hasNextKeyTyped()) {
                c = Character.toUpperCase(StdDraw.nextKeyTyped());
                if (c == 'N') {
                    this.seed = Long.parseLong(getSeed());
                    this.buildWorld();
                    break;

                } else if (c == 'L') {
                    drawFrame("Loading game ... ");
                    StdDraw.pause(LONG_PAUSE);
                    this.load();
                    ter.renderFrame(this.frame);
                    this.showHUD(actHistory.substring(actHistory.length() - 1), "Game loaded");
                    StdDraw.pause(LONG_PAUSE);
                    break;
                } else if (c == 'Q') {
                    drawFrame("See you next time");
                    StdDraw.pause(LONG_PAUSE);
                    System.exit(0);
                } else {
                    System.out.println("Unrecognized menu command");
                }
            }
        }

        this.handleAction();
    }

    private int[] to(char action) {
        int[] res = new int[2];

        switch (action) {
            case 'A':
                res[0] = you[0] - 1;
                res[1] = you[1];
                break;
            case 'D':
                res[0] = you[0] + 1;
                res[1] = you[1];
                break;
            case 'W':
                res[0] = you[0];
                res[1] = you[1] + 1;
                break;
            case 'S':
                res[0] = you[0];
                res[1] = you[1] - 1;
                break;
            default:
                throw new IllegalArgumentException("not in WASD");
        }

        return res;
    }

    private boolean validAction(int[] to) {
        int x = to[0];
        int y = to[1];
        return frame[x][y] == Tileset.FLOOR || frame[x][y] == Tileset.FLOOR_LIGHT
                || frame[x][y] == Tileset.UNLOCKED_DOOR || frame[x][y] == Tileset.DOLLAR
                || frame[x][y] == Tileset.SHINING_STAR || frame[x][y] == Tileset.STAR;
    }

    private void switchLight(int cx, int cy) {
        // TODO
    }

    private boolean act(int[] to) {
        boolean res = false;
        int x = to[0];
        int y = to[1];

        if (frame[x][y] == Tileset.UNLOCKED_DOOR) {
            res = true;
        } else if (frame[x][y] == Tileset.STAR || frame[x][y] == Tileset.SHINING_STAR) {
            //switch light
            switchLight(x, y);
            if (youtile == Tileset.FLOOR) {
                youtile = Tileset.FLOOR_LIGHT;
            } else {

                youtile = Tileset.FLOOR;
            }
            return false;
        }

        frame[you[0]][you[1]] = youtile;
        youtile = frame[x][y];
        frame[x][y] = Tileset.AVATAR;
        you = to;

        return res;
    }

    private void clearPlayFlags() {
        this.goal = false;
        this.done = false;
        this.colonflag = false;
    }

    /**
     * helper method to ensure (x,y) is inside our world
     * @param x
     * @param y
     * @return
     */
    private boolean insideWorld(int x, int y) {
        return x < frame.length && x >= 0
                && y < frame[0].length && y >= 0;
    }

    /**
     * handle user action
     */
    public void handleAction() {
        char c = ' ';
        int mx, my;
        while (true) {
            //handle mouse hover-over proj requirement (show tile description)
            mx = (int) StdDraw.mouseX();
            my = (int) StdDraw.mouseY();
            if (insideWorld(mx, my)
                && (mx != mouse[0] || my != mouse[1])) {
                mouse[0] = mx;
                mouse[1] = my;
                showHUD(String.valueOf(c), frame[mx][my].description());
                StdDraw.pause(LONG_PAUSE);
            }

            if (StdDraw.hasNextKeyTyped()) {
                c = Character.toUpperCase(StdDraw.nextKeyTyped());
                if (c == 'A' || c == 'D' || c == 'S' || c == 'W') {
                    actHistory.append(c);
                    colonflag = false;
                    //4 directions action
                    int[] to = to(c);
                    if (!validAction(to)) {
                        continue; //wait for a valid action
                    }

                    if (act(to)) {
                        //return true means goal is achieved
                        goal = true;
                        done = true;
                        ter.renderFrame(frame);
                        showHUD(String.valueOf(c));
                        break;
                    }

                } else if (c == ':') {
                    //handle command Q
                    //for now, just set goal and done
                    colonflag = true;
                } else if (colonflag && c == 'Q') {
                    save();
                    done = true;

                    break;
                } else {
                    colonflag = false;
                }
            }

            ter.renderFrame(frame);
            showHUD(String.valueOf(c));
            //draw HUD
        }

        if (done) {
            //game is over logic
            System.out.println("Game is over, goal: " + goal);
            System.out.println("actHistory: " + actHistory);
            quit(goal);
            this.showMenu("Want to play again?");
            clearPlayFlags();
            actHistory = new StringBuffer();
            youtile = Tileset.FLOOR;
            handleMenu();
        }
    }

    /**
     * handle same actions from a string
     * @param actions upper-case string passed in
     */
    public void handleActionFromString(String actions) {
        char c;
        for (int i = 0; i < actions.length(); i++) {
            c = actions.charAt(i);
            if (c == 'A' || c == 'D' || c == 'S' || c == 'W') {
                actHistory.append(c);
                colonflag = false;
                //4 directions action
                int[] to = to(c);
                if (!validAction(to)) {
                    continue; //wait for a valid action
                }

                if (act(to)) {
                    //return true means goal is achieved
                    goal = true;
                    done = true;
                    break;
                }
            } else if (c == ':') {
                //handle command Q
                //for now, just set goal and done
                colonflag = true;
            } else if (colonflag && c == 'Q') {
                save();
                done = true;
                break;
            } else {
                colonflag = false;
            }
        }
    }

    /**
     * Head-up Display
     *  include secondary feature: display of real date and time
     * @param act
     */
    public void showHUD(String act) {
        this.showHUD(act, "");
    }
    public void showHUD(String act, String status) {
        //get real date/time
        DateTimeFormatter df = DateTimeFormatter.ofPattern("MM/dd/yy HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();

        Font hfont = new Font("Newman", Font.BOLD, HUD_FONT_SIZE);
        StdDraw.setFont(hfont);
        StdDraw.setPenColor(Color.yellow);
        StdDraw.text(HUD_LEFT_START, height - HUD_MARGIN, "Act: " + act);
        StdDraw.text(width - HUD_RIGHT_START, height - HUD_MARGIN, df.format(now));

        StdDraw.setPenColor(Color.red);
        if (goal) {
            StdDraw.text(width / 2 - 2, height - HUD_MARGIN, "Goal Achieved!");
        } else if (done) {
            StdDraw.text(width / 2 - 2, height - HUD_MARGIN, "Game saved! Have funs.");
        }

        if (colonflag) {
            StdDraw.text(width / 2 - 2, height - HUD_MARGIN, "type Q to save and quit");
        }  else {
            //String encouragement = ENCOURAGEMENT[you[0] % ENCOURAGEMENT.length];
            StdDraw.text(width / 2 - 2, height - HUD_MARGIN, status);
        }
        StdDraw.show();
    }

    /**
     * we only need to save seed and actionHistory
     */
    public void save() {
        try {
            FileOutputStream fos = new FileOutputStream(SAVE);
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            oos.writeObject(seed);
            oos.writeObject(actHistory.toString());

        } catch (IOException e) {
            System.out.println("IO exception: " + e);
        }
    }

    public void load() {
        //TODO
    }

    private void quit(boolean replay) {
        //clear display and go away
        clearForMenu();

        String status = "";
        if (goal) {
            status = "You won!";
        } else {
            status = "Game saved! See ya.";
        }

        drawFrame(status);
        StdDraw.pause(LONG_PAUSE);

        /*if (!replay) {
            System.exit(0);
        }*/
    }
}
